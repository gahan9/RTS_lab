@article{Grindal2019,
    author = {Grindal, Mats and Lindstr√∂m, Birgitta and Realtime, Enea},
    year = {2019},
    month = {04},
    pages = {},
    title = {Challenges in Testing Real-Time Systems}
}
@incollection{Lin1995,
    author = {Lin, Kwei-Jay},
    chapter = {Issues on Real-time Systems Programming: Language, Compiler, and Object Orientation},
    title = {Advances in Real-time Systems},
    editor = {Son, Sang H.},
    year = {1995},
    isbn = {0-13-083348-7},
    pages = {335--351},
    numpages = {17},
    url = {http://dl.acm.org/citation.cfm?id=207721.207735},
    acmid = {207735},
    publisher = {Prentice-Hall, Inc.},
    address = {Upper Saddle River, NJ, USA},
} 

@online{realTimeIssues,
    author = {Alan C. Shaw},
    title = {Real-time Issues},
    url = {http://jcsites.juniata.edu/faculty/rhodes/smui/realtime.htm},
}
@online{LinuxRTCapabilities,
    author = {},
    organization = {Toradex Developer Center},
    title = {Linux Real-time Capabilities},
    url = {https://developer.toradex.com/knowledge-base/real-time-linux#Linux_Realtime_Capabilities},
}
@ARTICLE{Stoyenko1993, 
    author={A. D. {Stoyenko} and W. A. {Halang}}, 
    journal={IEEE Software}, 
    title={Extending Pearl for industrial real-time applications}, 
    year={1993}, 
    volume={10}, 
    number={4}, 
    pages={65-74}, 
    abstract={High-Integrity Pearl, (HI-Pearl) an extension to the Process and Experiment Automation Real-Time language (Pearl) which incorporates several principles from the real-time Euclid language, is described. The requirements of real-time software and components of a real-time language are reviewed. HI-Pearl's mechanisms for concurrency control, synchronization, allocation, time-bounded loops, surveillance of events, parallelism, timing constraints, overload detection and handling, storage management, run tracing, and error detection and handling are discussed. HI-Pearl's schedulability analyzer, an automated tool to predict whether real-time software will adhere to its critical timing constraints, is also discussed.<<ETX>>}, 
    keywords={concurrency control;high level languages;industrial computer control;real-time systems;scheduling;industrial computer control;Pearl;High-Integrity Pearl;HI-Pearl;Process and Experiment Automation Real-Time language;Euclid language;real-time software;concurrency control;synchronization;allocation;time-bounded loops;surveillance of events;parallelism;timing constraints;overload detection;storage management;run tracing;error detection;schedulability analyzer;critical timing constraints;Timing;Job shop scheduling;Educational institutions;Programming profession;Real time systems;Floating-point arithmetic;Hardware;Chemical industry;Application software;Computer industry}, 
    doi={10.1109/52.219619}, 
    ISSN={0740-7459}, 
    month={July},
}
@INPROCEEDINGS{6899172,
    author={C. {Landauer} and K. L. {Bellman}},
    booktitle={2014 IEEE 17th International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing},
    title={Programming Paradigms for Real-Time Systems},
    year={2014},
    volume={},
    number={},
    pages={366-373},
    abstract={This paper is about designing and constructing real-time systems, using mechanisms that support self-organization. Objects make a popular and convenient paradigm for keeping persistent data encapsulated with the operations that act on it, but they tend to omit what is arguably the most important aspect of real-time systems, which is time. There are other mechanisms that do model time, but few of them make time the central part of the programming model. In this short position paper, we offer two alternative(but complementary) approaches to modeling time (and other resource dependencies) in real-time systems, which should lead to more effective designs, since the timing and other interactions can be modeled sooner, and in any case, provide models with a different emphasis. We also make suggestions about the expressive language that can be used for the suggested kinds of modeling, and the infrastructure that underlies the process, which provides the computational reflection that enables self-organization.},
    keywords={data encapsulation;real-time systems;programming paradigms;real-time systems;self-organization;data encapsulation;programming model;time modeling;Real-time systems;Object oriented modeling;Program processors;Data models;Analytical models;Computational modeling;Mathematical model;Real-Time Systems;Model-Based Development;Scenario-Based Engineering Process;Computational Reflection;Wrapping Infrastructure;Problem Posing Programming Paradigm},
    doi={10.1109/ISORC.2014.42},
    ISSN={1555-0885},
    month={June},
}
@INPROCEEDINGS{8644769,
    author={G. {Chang}},
    booktitle={2018 International Symposium on Computer, Consumer and Control (IS3C)},
    title={A Programming Model for Multithreading with Real-Time Allocations of VC++ Controls},
    year={2018},
    volume={},
    number={},
    pages={34-37},
    abstract={The goal of this paper is to propose a programming model for supporting the technique of multithreading that performs real-time allocation of VC++ controls. In our approach, the design of task-interfacing class (TIC) plays an essential role in meeting the requirement of real-time, spatially distributed processing. Thru constructing the class, its object integrates multiple tasks as the class members, in preparation for the work of multithreading, where each task performs with an individual thread. Our experiments exhibit that the TIC model performs satisfactory results for the Windows programming.},
    keywords={multiprogramming;multi-threading;parallel processing;real-time systems;resource allocation;Windows programming;programming model;multithreading;real-time allocations;VC++ controls;task-interfacing class;distributed processing;parallel processing;Message systems;Task analysis;Multithreading;Real-time systems;Programming;Object oriented modeling;Microsoft Windows;multithreading, real-time, VC++, controls},
    doi={10.1109/IS3C.2018.00017},
    ISSN={},
    month={Dec},
}
